// Automatically generated by MockGen. DO NOT EDIT!
// Source: service.go

package mock_recommends

import (
	recomsproto "2019_2_IBAT/pkg/app/recommends/recomsproto"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// Mock of ServiceClient interface
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceClientRecorder
}

// Recorder for MockServiceClient (not exported)
type _MockServiceClientRecorder struct {
	mock *MockServiceClient
}

func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &_MockServiceClientRecorder{mock}
	return mock
}

func (_m *MockServiceClient) EXPECT() *_MockServiceClientRecorder {
	return _m.recorder
}

func (_m *MockServiceClient) SetTagIDs(ctx context.Context, in *recomsproto.SetTagIDsMessage, opts ...grpc.CallOption) (*recomsproto.Bool, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SetTagIDs", _s...)
	ret0, _ := ret[0].(*recomsproto.Bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceClientRecorder) SetTagIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTagIDs", _s...)
}

func (_m *MockServiceClient) GetTagIDs(ctx context.Context, in *recomsproto.GetTagIDsMessage, opts ...grpc.CallOption) (*recomsproto.IDsMessage, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetTagIDs", _s...)
	ret0, _ := ret[0].(*recomsproto.IDsMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceClientRecorder) GetTagIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTagIDs", _s...)
}

func (_m *MockServiceClient) GetUsersForTags(ctx context.Context, in *recomsproto.IDsMessage, opts ...grpc.CallOption) (*recomsproto.IDsMessage, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetUsersForTags", _s...)
	ret0, _ := ret[0].(*recomsproto.IDsMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceClientRecorder) GetUsersForTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUsersForTags", _s...)
}
