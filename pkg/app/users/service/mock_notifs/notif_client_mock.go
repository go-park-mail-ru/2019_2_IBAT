// Automatically generated by MockGen. DO NOT EDIT!
// Source: service.go

package mock_notifs

import (
	notifsproto "2019_2_IBAT/pkg/app/notifs/notifsproto"
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// Mock of ServiceClient interface
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceClientRecorder
}

// Recorder for MockServiceClient (not exported)
type _MockServiceClientRecorder struct {
	mock *MockServiceClient
}

func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &_MockServiceClientRecorder{mock}
	return mock
}

func (_m *MockServiceClient) EXPECT() *_MockServiceClientRecorder {
	return _m.recorder
}

func (_m *MockServiceClient) SendNotification(ctx context.Context, in *notifsproto.SendNotificationMessage, opts ...grpc.CallOption) (*notifsproto.Bool, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SendNotification", _s...)
	ret0, _ := ret[0].(*notifsproto.Bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceClientRecorder) SendNotification(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendNotification", _s...)
}
