// Automatically generated by MockGen. DO NOT EDIT!
// Source: service.go

package mock_users

import (
	io "io"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	. "2019_2_IBAT/internal/pkg/interfaces"
)

// Mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceRecorder
}

// Recorder for MockService (not exported)
type _MockServiceRecorder struct {
	mock *MockService
}

func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &_MockServiceRecorder{mock}
	return mock
}

func (_m *MockService) EXPECT() *_MockServiceRecorder {
	return _m.recorder
}

func (_m *MockService) CreateSeeker(body io.ReadCloser) (uuid.UUID, error) {
	ret := _m.ctrl.Call(_m, "CreateSeeker", body)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) CreateSeeker(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSeeker", arg0)
}

func (_m *MockService) CreateEmployer(body io.ReadCloser) (uuid.UUID, error) {
	ret := _m.ctrl.Call(_m, "CreateEmployer", body)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) CreateEmployer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateEmployer", arg0)
}

func (_m *MockService) DeleteUser(authInfo AuthStorageValue) error {
	ret := _m.ctrl.Call(_m, "DeleteUser", authInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteUser", arg0)
}

func (_m *MockService) PutSeeker(body io.ReadCloser, id uuid.UUID) error {
	ret := _m.ctrl.Call(_m, "PutSeeker", body, id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) PutSeeker(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutSeeker", arg0, arg1)
}

func (_m *MockService) PutEmployer(body io.ReadCloser, id uuid.UUID) error {
	ret := _m.ctrl.Call(_m, "PutEmployer", body, id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) PutEmployer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutEmployer", arg0, arg1)
}

func (_m *MockService) GetSeeker(id uuid.UUID) (Seeker, error) {
	ret := _m.ctrl.Call(_m, "GetSeeker", id)
	ret0, _ := ret[0].(Seeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) GetSeeker(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSeeker", arg0)
}

func (_m *MockService) GetEmployer(id uuid.UUID) (Employer, error) {
	ret := _m.ctrl.Call(_m, "GetEmployer", id)
	ret0, _ := ret[0].(Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) GetEmployer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEmployer", arg0)
}

func (_m *MockService) CreateVacancy(body io.ReadCloser, authInfo AuthStorageValue) (uuid.UUID, error) {
	ret := _m.ctrl.Call(_m, "CreateVacancy", body, authInfo)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) CreateVacancy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateVacancy", arg0, arg1)
}

func (_m *MockService) DeleteVacancy(vacancyId uuid.UUID, authInfo AuthStorageValue) error {
	ret := _m.ctrl.Call(_m, "DeleteVacancy", vacancyId, authInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) DeleteVacancy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteVacancy", arg0, arg1)
}

func (_m *MockService) GetVacancy(vacancyId uuid.UUID) (Vacancy, error) {
	ret := _m.ctrl.Call(_m, "GetVacancy", vacancyId)
	ret0, _ := ret[0].(Vacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) GetVacancy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVacancy", arg0)
}

func (_m *MockService) PutVacancy(vacancyId uuid.UUID, body io.ReadCloser, authInfo AuthStorageValue) error {
	ret := _m.ctrl.Call(_m, "PutVacancy", vacancyId, body, authInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) PutVacancy(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutVacancy", arg0, arg1, arg2)
}

func (_m *MockService) CreateResume(body io.ReadCloser, authInfo AuthStorageValue) (uuid.UUID, error) {
	ret := _m.ctrl.Call(_m, "CreateResume", body, authInfo)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) CreateResume(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateResume", arg0, arg1)
}

func (_m *MockService) DeleteResume(resumeId uuid.UUID, authInfo AuthStorageValue) error {
	ret := _m.ctrl.Call(_m, "DeleteResume", resumeId, authInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) DeleteResume(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteResume", arg0, arg1)
}

func (_m *MockService) GetResume(resumeId uuid.UUID) (Resume, error) {
	ret := _m.ctrl.Call(_m, "GetResume", resumeId)
	ret0, _ := ret[0].(Resume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) GetResume(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetResume", arg0)
}

func (_m *MockService) PutResume(resumeId uuid.UUID, body io.ReadCloser, authInfo AuthStorageValue) error {
	ret := _m.ctrl.Call(_m, "PutResume", resumeId, body, authInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceRecorder) PutResume(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutResume", arg0, arg1, arg2)
}

func (_m *MockService) CreateRespond(body io.ReadCloser, authInfo AuthStorageValue) (uuid.UUID, error) {
	ret := _m.ctrl.Call(_m, "CreateRespond", body, authInfo)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) CreateRespond(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateRespond", arg0, arg1)
}

func (_m *MockService) GetResponds(authInfo AuthStorageValue, params map[string]string) ([]Respond, error) {
	ret := _m.ctrl.Call(_m, "GetResponds", authInfo, params)
	ret0, _ := ret[0].([]Respond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) GetResponds(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetResponds", arg0, arg1)
}

func (_m *MockService) GetEmployers() ([]Employer, error) {
	ret := _m.ctrl.Call(_m, "GetEmployers")
	ret0, _ := ret[0].([]Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) GetEmployers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEmployers")
}

func (_m *MockService) GetSeekers() ([]Seeker, error) {
	ret := _m.ctrl.Call(_m, "GetSeekers")
	ret0, _ := ret[0].([]Seeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) GetSeekers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSeekers")
}

func (_m *MockService) GetResumes() ([]Resume, error) {
	ret := _m.ctrl.Call(_m, "GetResumes")
	ret0, _ := ret[0].([]Resume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) GetResumes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetResumes")
}

func (_m *MockService) GetVacancies(params map[string]interface{}) ([]Vacancy, error) {
	ret := _m.ctrl.Call(_m, "GetVacancies", params)
	ret0, _ := ret[0].([]Vacancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceRecorder) GetVacancies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVacancies", arg0)
}

func (_m *MockService) SetImage(id uuid.UUID, class string, imageName string) bool {
	ret := _m.ctrl.Call(_m, "SetImage", id, class, imageName)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockServiceRecorder) SetImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetImage", arg0, arg1, arg2)
}

func (_m *MockService) CheckUser(email string, password string) (uuid.UUID, string, bool) {
	ret := _m.ctrl.Call(_m, "CheckUser", email, password)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

func (_mr *_MockServiceRecorder) CheckUser(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckUser", arg0, arg1)
}
