// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package handler

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecode20192IBATPkgAppServerHandler(in *jlexer.Lexer, out *UserSeekAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "role":
			out.Role = string(in.String())
		case "profile":
			(out.Seeker).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgAppServerHandler(out *jwriter.Writer, in UserSeekAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix[1:])
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"profile\":"
		out.RawString(prefix)
		(in.Seeker).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserSeekAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgAppServerHandler(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserSeekAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgAppServerHandler(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserSeekAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgAppServerHandler(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserSeekAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgAppServerHandler(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgAppServerHandler1(in *jlexer.Lexer, out *UserEmplAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "role":
			out.Role = string(in.String())
		case "profile":
			(out.Employer).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgAppServerHandler1(out *jwriter.Writer, in UserEmplAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix[1:])
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"profile\":"
		out.RawString(prefix)
		(in.Employer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserEmplAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgAppServerHandler1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserEmplAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgAppServerHandler1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserEmplAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgAppServerHandler1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserEmplAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgAppServerHandler1(l, v)
}
