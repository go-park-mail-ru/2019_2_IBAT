// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	uuid "github.com/google/uuid"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecode20192IBATPkgPkgModels(in *jlexer.Lexer, out *VacancySlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(VacancySlice, 0, 1)
			} else {
				*out = VacancySlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Vacancy
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels(out *jwriter.Writer, in VacancySlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v VacancySlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancySlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancySlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancySlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels1(in *jlexer.Lexer, out *Vacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "owner_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.OwnerID).UnmarshalText(data))
			}
		case "region":
			out.Region = string(in.String())
		case "company_name":
			out.CompanyName = string(in.String())
		case "experience":
			out.Experience = string(in.String())
		case "position":
			out.Position = string(in.String())
		case "tasks":
			out.Tasks = string(in.String())
		case "requirements":
			out.Requirements = string(in.String())
		case "wage_from":
			out.WageFrom = string(in.String())
		case "type_of_employment":
			out.TypeOfEmployment = string(in.String())
		case "work_schedule":
			out.WorkSchedule = string(in.String())
		case "wage_to":
			out.WageTo = string(in.String())
		case "conditions":
			out.Conditions = string(in.String())
		case "favorite":
			out.Favorite = bool(in.Bool())
		case "is_responded":
			out.IsResponded = bool(in.Bool())
		case "about":
			out.About = string(in.String())
		case "spheres":
			if in.IsNull() {
				in.Skip()
				out.Spheres = nil
			} else {
				in.Delim('[')
				if out.Spheres == nil {
					if !in.IsDelim(']') {
						out.Spheres = make([]Pair, 0, 2)
					} else {
						out.Spheres = []Pair{}
					}
				} else {
					out.Spheres = (out.Spheres)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Pair
					(v4).UnmarshalEasyJSON(in)
					out.Spheres = append(out.Spheres, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels1(out *jwriter.Writer, in Vacancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.RawText((in.OwnerID).MarshalText())
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"company_name\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"experience\":"
		out.RawString(prefix)
		out.String(string(in.Experience))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"tasks\":"
		out.RawString(prefix)
		out.String(string(in.Tasks))
	}
	{
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		out.String(string(in.Requirements))
	}
	{
		const prefix string = ",\"wage_from\":"
		out.RawString(prefix)
		out.String(string(in.WageFrom))
	}
	{
		const prefix string = ",\"type_of_employment\":"
		out.RawString(prefix)
		out.String(string(in.TypeOfEmployment))
	}
	{
		const prefix string = ",\"work_schedule\":"
		out.RawString(prefix)
		out.String(string(in.WorkSchedule))
	}
	{
		const prefix string = ",\"wage_to\":"
		out.RawString(prefix)
		out.String(string(in.WageTo))
	}
	{
		const prefix string = ",\"conditions\":"
		out.RawString(prefix)
		out.String(string(in.Conditions))
	}
	{
		const prefix string = ",\"favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favorite))
	}
	{
		const prefix string = ",\"is_responded\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsResponded))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"spheres\":"
		out.RawString(prefix)
		if in.Spheres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Spheres {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels1(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels2(in *jlexer.Lexer, out *UserAuthInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels2(out *jwriter.Writer, in UserAuthInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAuthInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAuthInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAuthInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAuthInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels2(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels3(in *jlexer.Lexer, out *TagMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(TagMap)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v7 []string
			if in.IsNull() {
				in.Skip()
				v7 = nil
			} else {
				in.Delim('[')
				if v7 == nil {
					if !in.IsDelim(']') {
						v7 = make([]string, 0, 4)
					} else {
						v7 = []string{}
					}
				} else {
					v7 = (v7)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					v7 = append(v7, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
			(*out)[key] = v7
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels3(out *jwriter.Writer, in TagMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v9First := true
		for v9Name, v9Value := range in {
			if v9First {
				v9First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v9Name))
			out.RawByte(':')
			if v9Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v10, v11 := range v9Value {
					if v10 > 0 {
						out.RawByte(',')
					}
					out.String(string(v11))
				}
				out.RawByte(']')
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TagMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TagMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels3(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels4(in *jlexer.Lexer, out *TagAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parent_tag":
			out.ParentTag = string(in.String())
		case "child_tag":
			if in.IsNull() {
				in.Skip()
				out.ChildTagArr = nil
			} else {
				in.Delim('[')
				if out.ChildTagArr == nil {
					if !in.IsDelim(']') {
						out.ChildTagArr = make([]string, 0, 4)
					} else {
						out.ChildTagArr = []string{}
					}
				} else {
					out.ChildTagArr = (out.ChildTagArr)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.ChildTagArr = append(out.ChildTagArr, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels4(out *jwriter.Writer, in TagAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parent_tag\":"
		out.RawString(prefix[1:])
		out.String(string(in.ParentTag))
	}
	{
		const prefix string = ",\"child_tag\":"
		out.RawString(prefix)
		if in.ChildTagArr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.ChildTagArr {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TagAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TagAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TagAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TagAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels4(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels5(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parent_tag":
			out.ParentTag = string(in.String())
		case "child_tag":
			out.ChildTag = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels5(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"parent_tag\":"
		out.RawString(prefix[1:])
		out.String(string(in.ParentTag))
	}
	{
		const prefix string = ",\"child_tag\":"
		out.RawString(prefix)
		out.String(string(in.ChildTag))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels5(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels6(in *jlexer.Lexer, out *SeekerReg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "second_name":
			out.SecondName = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels6(out *jwriter.Writer, in SeekerReg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"second_name\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SeekerReg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SeekerReg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SeekerReg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SeekerReg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels6(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels7(in *jlexer.Lexer, out *Seeker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "first_name":
			out.FirstName = string(in.String())
		case "second_name":
			out.SecondName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "path_to_img":
			out.PathToImg = string(in.String())
		case "resumes":
			if in.IsNull() {
				in.Skip()
				out.Resumes = nil
			} else {
				in.Delim('[')
				if out.Resumes == nil {
					if !in.IsDelim(']') {
						out.Resumes = make([]uuid.UUID, 0, 4)
					} else {
						out.Resumes = []uuid.UUID{}
					}
				} else {
					out.Resumes = (out.Resumes)[:0]
				}
				for !in.IsDelim(']') {
					var v15 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v15).UnmarshalText(data))
					}
					out.Resumes = append(out.Resumes, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels7(out *jwriter.Writer, in Seeker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"second_name\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"path_to_img\":"
		out.RawString(prefix)
		out.String(string(in.PathToImg))
	}
	{
		const prefix string = ",\"resumes\":"
		out.RawString(prefix)
		if in.Resumes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Resumes {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.RawText((v17).MarshalText())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Seeker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Seeker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Seeker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Seeker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels7(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels8(in *jlexer.Lexer, out *Role) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "role":
			out.Role = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels8(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix[1:])
		out.String(string(in.Role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Role) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Role) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels8(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels9(in *jlexer.Lexer, out *ResumeSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ResumeSlice, 0, 1)
			} else {
				*out = ResumeSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v18 Resume
			(v18).UnmarshalEasyJSON(in)
			*out = append(*out, v18)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels9(out *jwriter.Writer, in ResumeSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v19, v20 := range in {
			if v19 > 0 {
				out.RawByte(',')
			}
			(v20).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ResumeSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResumeSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResumeSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResumeSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels9(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels10(in *jlexer.Lexer, out *Resume) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "own_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.OwnerID).UnmarshalText(data))
			}
		case "first_name":
			out.FirstName = string(in.String())
		case "second_name":
			out.SecondName = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone_number":
			out.PhoneNumber = string(in.String())
		case "birth_date":
			out.BirthDate = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "type_of_employment":
			out.TypeOfEmployment = string(in.String())
		case "work_schedule":
			out.WorkSchedule = string(in.String())
		case "citizenship":
			out.Citizenship = string(in.String())
		case "experience":
			out.Experience = string(in.String())
		case "position":
			out.Position = string(in.String())
		case "wage":
			out.Wage = string(in.String())
		case "education":
			out.Education = string(in.String())
		case "about":
			out.About = string(in.String())
		case "spheres":
			if in.IsNull() {
				in.Skip()
				out.Spheres = nil
			} else {
				in.Delim('[')
				if out.Spheres == nil {
					if !in.IsDelim(']') {
						out.Spheres = make([]Pair, 0, 2)
					} else {
						out.Spheres = []Pair{}
					}
				} else {
					out.Spheres = (out.Spheres)[:0]
				}
				for !in.IsDelim(']') {
					var v21 Pair
					(v21).UnmarshalEasyJSON(in)
					out.Spheres = append(out.Spheres, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels10(out *jwriter.Writer, in Resume) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"own_id\":"
		out.RawString(prefix)
		out.RawText((in.OwnerID).MarshalText())
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"second_name\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"phone_number\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"birth_date\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"type_of_employment\":"
		out.RawString(prefix)
		out.String(string(in.TypeOfEmployment))
	}
	{
		const prefix string = ",\"work_schedule\":"
		out.RawString(prefix)
		out.String(string(in.WorkSchedule))
	}
	{
		const prefix string = ",\"citizenship\":"
		out.RawString(prefix)
		out.String(string(in.Citizenship))
	}
	{
		const prefix string = ",\"experience\":"
		out.RawString(prefix)
		out.String(string(in.Experience))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"wage\":"
		out.RawString(prefix)
		out.String(string(in.Wage))
	}
	{
		const prefix string = ",\"education\":"
		out.RawString(prefix)
		out.String(string(in.Education))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"spheres\":"
		out.RawString(prefix)
		if in.Spheres == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Spheres {
				if v22 > 0 {
					out.RawByte(',')
				}
				(v23).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Resume) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Resume) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Resume) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Resume) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels10(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels11(in *jlexer.Lexer, out *RespondSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(RespondSlice, 0, 1)
			} else {
				*out = RespondSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v24 Respond
			(v24).UnmarshalEasyJSON(in)
			*out = append(*out, v24)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels11(out *jwriter.Writer, in RespondSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v25, v26 := range in {
			if v25 > 0 {
				out.RawByte(',')
			}
			(v26).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RespondSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RespondSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RespondSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RespondSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels11(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels12(in *jlexer.Lexer, out *Respond) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = string(in.String())
		case "resume_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResumeID).UnmarshalText(data))
			}
		case "vacancy_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.VacancyID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels12(out *jwriter.Writer, in Respond) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"resume_id\":"
		out.RawString(prefix)
		out.RawText((in.ResumeID).MarshalText())
	}
	{
		const prefix string = ",\"vacancy_id\":"
		out.RawString(prefix)
		out.RawText((in.VacancyID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Respond) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Respond) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Respond) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Respond) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels12(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels13(in *jlexer.Lexer, out *Pair) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first":
			out.First = string(in.String())
		case "second":
			out.Second = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels13(out *jwriter.Writer, in Pair) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first\":"
		out.RawString(prefix[1:])
		out.String(string(in.First))
	}
	{
		const prefix string = ",\"second\":"
		out.RawString(prefix)
		out.String(string(in.Second))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pair) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pair) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pair) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pair) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels13(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels14(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Body = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels14(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Body))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels14(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels15(in *jlexer.Lexer, out *Id) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels15(out *jwriter.Writer, in Id) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Id) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Id) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Id) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Id) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels15(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels16(in *jlexer.Lexer, out *FavoriteVacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "person_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.PersonID).UnmarshalText(data))
			}
		case "vacancy_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.VacancyID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels16(out *jwriter.Writer, in FavoriteVacancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"person_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.PersonID).MarshalText())
	}
	{
		const prefix string = ",\"vacancy_id\":"
		out.RawString(prefix)
		out.RawText((in.VacancyID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FavoriteVacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FavoriteVacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FavoriteVacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FavoriteVacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels16(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels17(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Message = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Params = make(map[string]string)
				} else {
					out.Params = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 string
					v27 = string(in.String())
					(out.Params)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels17(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.Params {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				out.String(string(v28Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels17(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels18(in *jlexer.Lexer, out *EmployerSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(EmployerSlice, 0, 1)
			} else {
				*out = EmployerSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v29 Employer
			(v29).UnmarshalEasyJSON(in)
			*out = append(*out, v29)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels18(out *jwriter.Writer, in EmployerSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v30, v31 := range in {
			if v30 > 0 {
				out.RawByte(',')
			}
			(v31).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v EmployerSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmployerSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmployerSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmployerSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels18(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels19(in *jlexer.Lexer, out *EmployerReg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "company_name":
			out.CompanyName = string(in.String())
		case "site":
			out.Site = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "second_name":
			out.SecondName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone_number":
			out.PhoneNumber = string(in.String())
		case "extra_phone_number":
			out.ExtraPhoneNumber = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "empl_num":
			out.EmplNum = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels19(out *jwriter.Writer, in EmployerReg) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"company_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		out.String(string(in.Site))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"second_name\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"phone_number\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"extra_phone_number\":"
		out.RawString(prefix)
		out.String(string(in.ExtraPhoneNumber))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"empl_num\":"
		out.RawString(prefix)
		out.String(string(in.EmplNum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmployerReg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmployerReg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmployerReg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmployerReg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels19(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels20(in *jlexer.Lexer, out *Employer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "company_name":
			out.CompanyName = string(in.String())
		case "site":
			out.Site = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "second_name":
			out.SecondName = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone_number":
			out.PhoneNumber = string(in.String())
		case "extra_phone_number":
			out.ExtraPhoneNumber = string(in.String())
		case "spheres_of_work":
			out.SpheresOfWork = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "empl_num":
			out.EmplNum = string(in.String())
		case "path_to_img":
			out.PathToImg = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "vacancies":
			if in.IsNull() {
				in.Skip()
				out.Vacancies = nil
			} else {
				in.Delim('[')
				if out.Vacancies == nil {
					if !in.IsDelim(']') {
						out.Vacancies = make([]uuid.UUID, 0, 4)
					} else {
						out.Vacancies = []uuid.UUID{}
					}
				} else {
					out.Vacancies = (out.Vacancies)[:0]
				}
				for !in.IsDelim(']') {
					var v32 uuid.UUID
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v32).UnmarshalText(data))
					}
					out.Vacancies = append(out.Vacancies, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels20(out *jwriter.Writer, in Employer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"company_name\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		out.String(string(in.Site))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"second_name\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"phone_number\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	{
		const prefix string = ",\"extra_phone_number\":"
		out.RawString(prefix)
		out.String(string(in.ExtraPhoneNumber))
	}
	{
		const prefix string = ",\"spheres_of_work\":"
		out.RawString(prefix)
		out.String(string(in.SpheresOfWork))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"empl_num\":"
		out.RawString(prefix)
		out.String(string(in.EmplNum))
	}
	{
		const prefix string = ",\"path_to_img\":"
		out.RawString(prefix)
		out.String(string(in.PathToImg))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"vacancies\":"
		out.RawString(prefix)
		if in.Vacancies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.Vacancies {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.RawText((v34).MarshalText())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Employer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Employer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Employer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Employer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels20(l, v)
}
func easyjsonD2b7633eDecode20192IBATPkgPkgModels21(in *jlexer.Lexer, out *AuthStorageValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "Expires":
			out.Expires = string(in.String())
		case "Role":
			out.Role = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode20192IBATPkgPkgModels21(out *jwriter.Writer, in AuthStorageValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"Expires\":"
		out.RawString(prefix)
		out.String(string(in.Expires))
	}
	{
		const prefix string = ",\"Role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthStorageValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncode20192IBATPkgPkgModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthStorageValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncode20192IBATPkgPkgModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthStorageValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecode20192IBATPkgPkgModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthStorageValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecode20192IBATPkgPkgModels21(l, v)
}
