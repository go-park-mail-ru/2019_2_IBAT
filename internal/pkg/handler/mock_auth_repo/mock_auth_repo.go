// Automatically generated by MockGen. DO NOT EDIT!
// Source: repository.go

package mock_auth_repo

import (
	. "2019_2_IBAT/internal/pkg/interfaces"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// Mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockRepositoryRecorder
}

// Recorder for MockRepository (not exported)
type _MockRepositoryRecorder struct {
	mock *MockRepository
}

func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &_MockRepositoryRecorder{mock}
	return mock
}

func (_m *MockRepository) EXPECT() *_MockRepositoryRecorder {
	return _m.recorder
}

func (_m *MockRepository) Get(cookie string) (AuthStorageValue, bool) {
	ret := _m.ctrl.Call(_m, "Get", cookie)
	ret0, _ := ret[0].(AuthStorageValue)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

func (_mr *_MockRepositoryRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockRepository) Set(id uuid.UUID, class string) (AuthStorageValue, string, error) {
	ret := _m.ctrl.Call(_m, "Set", id, class)
	ret0, _ := ret[0].(AuthStorageValue)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockRepositoryRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Set", arg0, arg1)
}

func (_m *MockRepository) Delete(cookie string) bool {
	ret := _m.ctrl.Call(_m, "Delete", cookie)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockRepositoryRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}
